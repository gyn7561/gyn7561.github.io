{"version":3,"sources":["hangul.js","kana.js","CharCardV2.js","App.js","serviceWorker.js","index.js"],"names":["Aromanize","require","all","i","push","String","fromCharCode","allChar","romanize","char","kana","forEach","c","length","element","lv1","lv1Hanja","allChineseChar","hanjaMap","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","padding","spacing","fontSize","props","charSet","classes","React","useState","setChar","setInput","options","setOptions","showLatin","setShowLatin","charWords","setCharWords","hangul","init","randomChar","index","parseInt","Math","random","arr","Hangul","endWithComplexConsonant","result","word","words","cn","indexOf","findCharWords","trueAnswer","opt","right","rndHanja","sort","randomAnsers","useEffect","Card","CardContent","Typography","align","className","style","map","w","list","renderDetail","o","width","textAlign","marginTop","Button","variant","disabled","select","color","onClick","answer","setTimeout","JSON","parse","stringify","App","setCharSet","CharCardV2","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c7048b1.chunk.js","sourcesContent":["\r\nvar Aromanize = require(\"aromanize\");\r\n\r\nlet all = [];\r\nfor (var i = 0; i < 11172; i++) {\r\n    all.push(String.fromCharCode(i + 44032));\r\n}\r\nfunction romanize(char) {\r\n    return Aromanize.romanize(char);\r\n}\r\nexport default { allChar: all, romanize };","\r\nvar kana = [\r\n    [\"tsu\", \"つ\"],\r\n    [\"TSU\", \"ツ\"],\r\n    [\"dji\", \"ぢ\"], [\"dzu\", \"づ\"],\r\n    [\"DJI\", \"ヂ\"], [\"DZU\", \"ヅ\"],\r\n    [\"kya\", \"きゃ\"], [\"kyu\", \"きゅ\"], [\"kyo\", \"きょ\"],\r\n    [\"sha\", \"しゃ\"], [\"shu\", \"しゅ\"], [\"sho\", \"しょ\"],\r\n    [\"cha\", \"ちゃ\"], [\"chu\", \"ちゅ\"], [\"cho\", \"ちょ\"],\r\n    [\"nya\", \"にゃ\"], [\"nyu\", \"にゅ\"], [\"nyo\", \"にょ\"],\r\n    [\"hya\", \"ひゃ\"], [\"hyu\", \"ひゅ\"], [\"hyo\", \"ひょ\"],\r\n    [\"mya\", \"みゃ\"], [\"myu\", \"みゅ\"], [\"myo\", \"みょ\"],\r\n    [\"rya\", \"りゃ\"], [\"ryu\", \"りゅ\"], [\"ryo\", \"りょ\"],\r\n    [\"gya\", \"ぎゃ\"], [\"gyu\", \"ぎゅ\"], [\"gyo\", \"ぎょ\"],\r\n    [\"jya\", \"じゃ\"], [\"jyu\", \"じゅ\"], [\"jyo\", \"じょ\"],\r\n    [\"dya\", \"ぢゃ\"], [\"dyu\", \"ぢゅ\"], [\"dyo\", \"ぢょ\"],\r\n    [\"bya\", \"びゃ\"], [\"byu\", \"びゅ\"], [\"byo\", \"びょ\"],\r\n    [\"pya\", \"ぴゃ\"], [\"pyu\", \"ぴゅ\"], [\"pyo\", \"ぴょ\"],\r\n    [\"KYA\", \"キャ\"], [\"KYU\", \"キュ\"], [\"KYO\", \"キョ\"],\r\n    [\"SHA\", \"シャ\"], [\"SHU\", \"シュ\"], [\"SHO\", \"ショ\"],\r\n    [\"CHA\", \"チャ\"], [\"CHU\", \"チュ\"], [\"CHO\", \"チョ\"],\r\n    [\"NYA\", \"ニャ\"], [\"NYU\", \"ニュ\"], [\"NYO\", \"ニョ\"],\r\n    [\"HYA\", \"ヒャ\"], [\"HYU\", \"ヒュ\"], [\"HYO\", \"ヒョ\"],\r\n    [\"MYA\", \"ミャ\"], [\"MYU\", \"ミュ\"], [\"MYO\", \"ミョ\"],\r\n    [\"RYA\", \"リャ\"], [\"RYU\", \"リュ\"], [\"RYO\", \"リョ\"],\r\n    [\"GYA\", \"ギャ\"], [\"GYU\", \"ギュ\"], [\"GYO\", \"ギョ\"],\r\n    [\"JYA\", \"ジャ\"], [\"JYU\", \"ジュ\"], [\"JYO\", \"ジョ\"],\r\n    [\"DYA\", \"ヂャ\"], [\"DYU\", \"ヂュ\"], [\"DYO\", \"ヂョ\"],\r\n    [\"BYA\", \"ビャ\"], [\"BYU\", \"ビュ\"], [\"BYO\", \"ビョ\"],\r\n    [\"PYA\", \"ピャ\"], [\"PYU\", \"ピュ\"], [\"PYO\", \"ピョ\"],\r\n    [\"ka\", \"か\"], [\"ki\", \"き\"], [\"ku\", \"く\"], [\"ke\", \"け\"], [\"ko\", \"こ\"],\r\n    [\"sa\", \"さ\"], [\"shi\", \"し\"], [\"su\", \"す\"], [\"se\", \"せ\"], [\"so\", \"そ\"],\r\n    [\"ta\", \"た\"], [\"chi\", \"ち\"], [\"te\", \"て\"], [\"to\", \"と\"],\r\n    [\"na\", \"な\"], [\"ni\", \"に\"], [\"nu\", \"ぬ\"], [\"ne\", \"ね\"], [\"no\", \"の\"],\r\n    [\"ha\", \"は\"], [\"hi\", \"ひ\"], [\"fu\", \"ふ\"], [\"he\", \"へ\"], [\"ho\", \"ほ\"],\r\n    [\"ma\", \"ま\"], [\"mi\", \"み\"], [\"mu\", \"む\"], [\"me\", \"め\"], [\"mo\", \"も\"],\r\n    [\"ra\", \"ら\"], [\"ri\", \"り\"], [\"ru\", \"る\"], [\"re\", \"れ\"], [\"ro\", \"ろ\"],\r\n    [\"ya\", \"や\"], [\"yu\", \"ゆ\"], [\"yo\", \"よ\"],\r\n    [\"wa\", \"わ\"], [\"wo\", \"を\"],\r\n    [\"nn\", \"ん\"],\r\n    [\"ga\", \"が\"], [\"gi\", \"ぎ\"], [\"gu\", \"ぐ\"], [\"ge\", \"げ\"], [\"go\", \"ご\"],\r\n    [\"za\", \"ざ\"], [\"ji\", \"じ\"], [\"zu\", \"ず\"], [\"ze\", \"ぜ\"], [\"zo\", \"ぞ\"],\r\n    [\"da\", \"だ\"], [\"de\", \"で\"], [\"do\", \"ど\"],\r\n    [\"pa\", \"ぱ\"], [\"pi\", \"ぴ\"], [\"pu\", \"ぷ\"], [\"pe\", \"ぺ\"], [\"po\", \"ぽ\"],\r\n    [\"ba\", \"ば\"], [\"bi\", \"び\"], [\"bu\", \"ぶ\"], [\"be\", \"べ\"], [\"bo\", \"ぼ\"],\r\n    [\"KA\", \"カ\"], [\"KI\", \"キ\"], [\"KU\", \"ク\"], [\"KE\", \"ケ\"], [\"KO\", \"コ\"],\r\n    [\"SA\", \"サ\"], [\"SHI\", \"シ\"], [\"SU\", \"ス\"], [\"SE\", \"セ\"], [\"SO\", \"ソ\"],\r\n    [\"TA\", \"タ\"], [\"CHI\", \"チ\"], [\"TE\", \"テ\"], [\"TO\", \"ト\"],\r\n    [\"NA\", \"ナ\"], [\"NI\", \"ニ\"], [\"NU\", \"ヌ\"], [\"NE\", \"ネ\"], [\"NO\", \"ノ\"],\r\n    [\"HA\", \"ハ\"], [\"HI\", \"ヒ\"], [\"FU\", \"フ\"], [\"HE\", \"ヘ\"], [\"HO\", \"ホ\"],\r\n    [\"MA\", \"マ\"], [\"MI\", \"ミ\"], [\"MU\", \"ム\"], [\"ME\", \"メ\"], [\"MO\", \"モ\"],\r\n    [\"RA\", \"ラ\"], [\"RI\", \"リ\"], [\"RU\", \"ル\"], [\"RE\", \"レ\"], [\"RO\", \"ロ\"],\r\n    [\"YA\", \"ヤ\"], [\"YU\", \"ユ\"], [\"YO\", \"ヨ\"],\r\n    [\"WA\", \"ワ\"], [\"WO\", \"ヲ\"],\r\n    [\"NN\", \"ン\"],\r\n    [\"GA\", \"ガ\"], [\"GI\", \"ギ\"], [\"GU\", \"グ\"], [\"GE\", \"ゲ\"], [\"GO\", \"ゴ\"],\r\n    [\"ZA\", \"ザ\"], [\"JI\", \"ジ\"], [\"ZU\", \"ズ\"], [\"ZE\", \"ゼ\"], [\"ZO\", \"ゾ\"],\r\n    [\"DA\", \"ダ\"], [\"DE\", \"デ\"], [\"DO\", \"ド\"],\r\n    [\"PA\", \"パ\"], [\"PI\", \"ピ\"], [\"PU\", \"プ\"], [\"PE\", \"ペ\"], [\"PO\", \"ポ\"],\r\n    [\"BA\", \"バ\"], [\"BI\", \"ビ\"], [\"BU\", \"ブ\"], [\"BE\", \"ベ\"], [\"BO\", \"ボ\"],\r\n    // [\"kk\", \"っ\"], [\"ss\", \"っ\"], [\"tt\", \"っ\"], [\"pp\", \"っ\"],\r\n    // [\"KK\", \"ッ\"], [\"SS\", \"ッ\"], [\"TT\", \"ッ\"], [\"PP\", \"ッ\"],\r\n    [\"a\", \"あ\"], [\"i\", \"い\"], [\"u\", \"う\"], [\"e\", \"え\"], [\"o\", \"お\"],\r\n    [\"A\", \"ア\"], [\"I\", \"イ\"], [\"U\", \"ウ\"], [\"E\", \"エ\"], [\"O\", \"オ\"]\r\n];\r\n\r\n\r\nlet allChar = [];\r\n\r\nkana.forEach(c => {\r\n    allChar.push(c[1]);\r\n});\r\n\r\nfunction romanize(char) {\r\n    for (let i = 0; i < kana.length; i++) {\r\n        const element = kana[i];\r\n        if (element[1] === char) {\r\n            return element[0];\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default { allChar, romanize };","import React, { useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { FormControl, InputLabel, OutlinedInput } from \"@material-ui/core\";\r\nimport hangul from \"./hangul\";\r\nimport kana from \"./kana\";\r\nimport * as Hangul from 'hangul-js';\r\nlet lv1 = require(\"./data/lv1.json\");\r\nlet lv1Hanja = lv1.allChineseChar;\r\nlet hanjaMap = require(\"./data/hanja.json\");\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(1),\r\n        fontSize: 70\r\n    },\r\n}));\r\n\r\n\r\nexport default function (props) {\r\n    let { charSet } = props;\r\n    const classes = useStyles();\r\n\r\n    const [char, setChar] = React.useState(\"\");\r\n    const [input, setInput] = React.useState(\"\");\r\n    const [options, setOptions] = React.useState([]);\r\n    const [showLatin, setShowLatin] = React.useState(false);\r\n    const [charWords, setCharWords] = React.useState([]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n\r\n    function randomChar() {\r\n        if (charSet === \"hangul\") {\r\n            let index = parseInt(Math.random() * hangul.allChar.length);\r\n            let char = hangul.allChar[index];\r\n            function endWithComplexConsonant() {\r\n                let arr = [\"ㄳ\", \"ㄵ\", \"ㄶ\", \"ㄺ\", \"ㄻ\", \"ㄼ\", \"ㄽ\", \"ㄾ\", \"ㄿ\", \"ㅀ\", \"ㅄ\"];\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    const element = arr[i];\r\n                    if (Hangul.search(char, element) !== -1) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            if (endWithComplexConsonant()) {\r\n                if (Math.random() < 0.1) {\r\n                    return char;\r\n                } else {\r\n                    return randomChar();\r\n                }\r\n            }\r\n            return char;\r\n        } else if (charSet == \"kana\") {\r\n            let index = parseInt(Math.random() * kana.allChar.length);\r\n            return kana.allChar[index];\r\n        } else if (charSet === \"hanja\") {\r\n            let index = parseInt(Math.random() * lv1Hanja.length);\r\n            return lv1Hanja[index];\r\n        }\r\n    }\r\n\r\n    function romanize(char) {\r\n        if (charSet == \"hangul\") {\r\n            return hangul.romanize(char);\r\n        } else if (charSet == \"kana\") {\r\n            return kana.romanize(char);\r\n        }\r\n    }\r\n\r\n    function findCharWords(char) {\r\n        let result = [];\r\n        for (const word in lv1.words) {\r\n            let cn = lv1.words[word];\r\n            if (cn.indexOf(char) !== -1) {\r\n                result.push({ word, cn });\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function init() {\r\n        let char = randomChar();\r\n        setInput(\"\");\r\n        setChar(char);\r\n\r\n        setCharWords(findCharWords(char));\r\n\r\n        randomAnsers(char);\r\n        setShowLatin(false);\r\n    }\r\n\r\n    function randomAnsers(char) {\r\n        let result = [];\r\n        let trueAnswer = hanjaMap[char][0];\r\n        result.push({ opt: trueAnswer, right: true });\r\n        while (result.length < 4) {\r\n            let index = parseInt(Math.random() * lv1Hanja.length);\r\n            let rndHanja = lv1Hanja[index];\r\n            let opt = hanjaMap[rndHanja][0];\r\n            if (trueAnswer !== opt) {\r\n                result.push({ opt: opt, right: false });\r\n            }\r\n        }\r\n\r\n        var randomNumber = function () {\r\n            // randomNumber(a,b) 返回的值大于 0 ，则 b 在 a 的前边；\r\n            // randomNumber(a,b) 返回的值等于 0 ，则a 、b 位置保持不变；\r\n            // randomNumber(a,b) 返回的值小于 0 ，则 a 在 b 的前边。\r\n            return 0.5 - Math.random()\r\n        }\r\n        result.sort(randomNumber);\r\n        setOptions(result);\r\n    }\r\n\r\n\r\n\r\n    function onInput(e) {\r\n        let value = e.target.value;\r\n        setInput(value);\r\n        if (romanize(char).toLowerCase() === value.toLowerCase()) {\r\n            init();\r\n        }\r\n    }\r\n\r\n    function renderDetail() {\r\n        if (charSet === 'hangul') {\r\n            let list = Hangul.disassemble(char);\r\n            return <div>{list.map(c => <span>{c}</span>)}</div>\r\n        }\r\n    }\r\n\r\n    function clickOption(answer) {\r\n        if (answer.right) {\r\n            setTimeout(() => {\r\n                init();\r\n            }, 3000);\r\n        }\r\n        answer.select = true;\r\n        setOptions(JSON.parse(JSON.stringify(options)));\r\n    }\r\n\r\n    return <Card>\r\n        <CardContent>\r\n            <Typography align=\"center\" className={classes.root}>\r\n                {char}\r\n                <div style={{ fontSize: 14 }}>\r\n                    {charWords.map(w => <span>\r\n                        {w.cn}({w.word})\r\n                    </span>)}\r\n                </div>\r\n                {showLatin && <span>-{romanize(char)}\r\n                    {showLatin && renderDetail()}\r\n                </span>}\r\n                {/*- {Aromanize.romanize(char)} */}\r\n            </Typography>\r\n            {/* <FormControl fullWidth className={classes.margin} variant=\"outlined\">\r\n                <InputLabel htmlFor=\"outlined-adornment-amount\">输入发音</InputLabel>\r\n                <OutlinedInput\r\n                    id=\"outlined-adornment-amount\"\r\n                    value={input}\r\n                    onChange={e => onInput(e)}\r\n                    labelWidth={60}\r\n                    placeholder=\"输入发音\"\r\n                />\r\n            </FormControl> */}\r\n\r\n            {\r\n                options.map(o => <div style={{ width: \"100%\", textAlign: \"center\", marginTop: 20 }}>\r\n                    <Button variant=\"contained\" disabled={o.select && !o.right} color={o.select ? (o.right ? \"secondary\" : \"\") : \"primary\"} style={{ width: \"90%\" }} onClick={() => { clickOption(o) }}>\r\n                        {o.opt}\r\n                    </Button>\r\n                </div>)\r\n            }\r\n\r\n\r\n        </CardContent>\r\n\r\n        {/* <CardActions>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setShowLatin(true)} >显示latin </Button>\r\n        </CardActions> */}\r\n    </Card>;\r\n}\r\n\r\n","import React from 'react';\r\nimport CharCardV2 from './CharCardV2';\r\nimport { Button } from '@material-ui/core';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nfunction App() {\r\n  let [charSet, setCharSet] = React.useState(null);\r\n\r\n  if (charSet == null) {\r\n    return <div>\r\n      <Button onClick={() => setCharSet(\"kana\")}>假名</Button>\r\n      <Button onClick={() => setCharSet(\"hangul\")} >谚文</Button>\r\n      <Button onClick={() => setCharSet(\"hanja\")} >韩语汉字</Button>\r\n    </div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CharCardV2 charSet={charSet} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}